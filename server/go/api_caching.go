/*
 * Rate Limit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"net/http"
	"strings"
)

// CachingApiController binds http requests to an api service and writes the service results to the http response
type CachingApiController struct {
	service      CachingApiServicer
	errorHandler ErrorHandler
}

// CachingApiOption for how the controller is set up.
type CachingApiOption func(*CachingApiController)

// WithCachingApiErrorHandler inject ErrorHandler into controller
func WithCachingApiErrorHandler(h ErrorHandler) CachingApiOption {
	return func(c *CachingApiController) {
		c.errorHandler = h
	}
}

// NewCachingApiController creates a default api controller
func NewCachingApiController(s CachingApiServicer, opts ...CachingApiOption) Router {
	controller := &CachingApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CachingApiController
func (c *CachingApiController) Routes() Routes {
	return Routes{
		{
			"CacheableGet",
			strings.ToUpper("Get"),
			"/cacheable",
			c.CacheableGet,
		},
	}
}

// CacheableGet - Get a cacheable response.
func (c *CachingApiController) CacheableGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	bookTitleParam := query.Get("book-title")
	lineNumberParam, err := parseInt32Parameter(query.Get("line-number"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	withControlParam, err := parseBoolParameter(query.Get("with-control"), false)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	result, err := c.service.CacheableGet(r.Context(), bookTitleParam, lineNumberParam, withControlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
