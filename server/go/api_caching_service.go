/*
 * Rate Limit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	"github.com/rs/zerolog"
	"github.com/thecoreman/problematic-api-server/logic"
)

// CachingApiService is a service that implements the logic for the CachingApiServicer
// This service should implement the business logic for every endpoint for the CachingApi API.
// Include any external packages or services that will be required by this service.
type CachingApiService struct {
	logger zerolog.Logger
}

// NewCachingApiService creates a default api service
func NewCachingApiService(logger zerolog.Logger) CachingApiServicer {
	return &CachingApiService{
		logger: logger.With().Str("component", "caching-api").Logger(),
	}
}

// CacheableGet - Get a cacheable response.
func (s *CachingApiService) CacheableGet(
	ctx context.Context,
	bookTitle string,
	lineNumber int32,
	withControl bool,
) (ImplResponse, error) {
	s.logger.
		Info().
		Str("bookTitle", bookTitle).
		Bool("withControl", withControl).
		Int32("lineNumber", lineNumber).
		Msg("CacheableGet called")
	line, err := logic.ReadRandomLineFromFile(bookTitle, int(lineNumber))
	if err != nil {
		var lineNotFoundError *logic.LineNotFoundError
		var bookNotFoundError *logic.BookNotFoundError
		switch {
		case errors.As(err, &lineNotFoundError):
			return Response(http.StatusNotFound, err.Error()), nil
		case errors.As(err, &bookNotFoundError):
			return Response(http.StatusNotFound, err.Error()), nil
		default:
			return Response(http.StatusInternalServerError, fmt.Sprintf("An unknown error has occured: %s", err.Error())), nil
		}
	}

	responseBody := SuccessfulResponse{
		BookName:   bookTitle,
		LineNumber: lineNumber,
		Text:       line,
	}

	if withControl {
		return ResponseWithHeaders(
			http.StatusOK,
			map[string][]string{
				"Cache-Control": {"max-age=3600"},
			},
			responseBody,
		), nil
	}
	return Response(http.StatusOK, responseBody), nil
}
