/*
 * Rate Limit API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"net/http"
	"strings"
)

// RateLimitingApiController binds http requests to an api service and writes the service results to the http response
type RateLimitingApiController struct {
	service      RateLimitingApiServicer
	errorHandler ErrorHandler
}

// RateLimitingApiOption for how the controller is set up.
type RateLimitingApiOption func(*RateLimitingApiController)

// WithRateLimitingApiErrorHandler inject ErrorHandler into controller
func WithRateLimitingApiErrorHandler(h ErrorHandler) RateLimitingApiOption {
	return func(c *RateLimitingApiController) {
		c.errorHandler = h
	}
}

// NewRateLimitingApiController creates a default api controller
func NewRateLimitingApiController(s RateLimitingApiServicer, opts ...RateLimitingApiOption) Router {
	controller := &RateLimitingApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RateLimitingApiController
func (c *RateLimitingApiController) Routes() Routes {
	return Routes{
		{
			"RateLimitByAccountGet",
			strings.ToUpper("Get"),
			"/rate-limit/by-account",
			c.RateLimitByAccountGet,
		},
		{
			"RateLimitByIpGet",
			strings.ToUpper("Get"),
			"/rate-limit/by-ip",
			c.RateLimitByIpGet,
		},
		{
			"RateLimitExponentialBackoffGet",
			strings.ToUpper("Get"),
			"/rate-limit/exponential-backoff",
			c.RateLimitExponentialBackoffGet,
		},
	}
}

// RateLimitByAccountGet - An API with an aggressive rate limit by account
func (c *RateLimitingApiController) RateLimitByAccountGet(w http.ResponseWriter, r *http.Request) {
	accountIdParam := r.Header.Get("accountId")
	result, err := c.service.RateLimitByAccountGet(r.Context(), accountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// RateLimitByIpGet - An API with an aggressive rate limit by IP
func (c *RateLimitingApiController) RateLimitByIpGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RateLimitByIpGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}

// RateLimitExponentialBackoffGet - An API with an aggressive rate limit with exponential backoff.
func (c *RateLimitingApiController) RateLimitExponentialBackoffGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RateLimitExponentialBackoffGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)
}
