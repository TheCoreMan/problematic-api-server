/*
Rate Limit API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CooldownResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CooldownResponse{}

// CooldownResponse struct for CooldownResponse
type CooldownResponse struct {
	// Cooldown in seconds
	Cooldown *int32 `json:"cooldown,omitempty"`
}

// NewCooldownResponse instantiates a new CooldownResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCooldownResponse() *CooldownResponse {
	this := CooldownResponse{}
	return &this
}

// NewCooldownResponseWithDefaults instantiates a new CooldownResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCooldownResponseWithDefaults() *CooldownResponse {
	this := CooldownResponse{}
	return &this
}

// GetCooldown returns the Cooldown field value if set, zero value otherwise.
func (o *CooldownResponse) GetCooldown() int32 {
	if o == nil || IsNil(o.Cooldown) {
		var ret int32
		return ret
	}
	return *o.Cooldown
}

// GetCooldownOk returns a tuple with the Cooldown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CooldownResponse) GetCooldownOk() (*int32, bool) {
	if o == nil || IsNil(o.Cooldown) {
		return nil, false
	}
	return o.Cooldown, true
}

// HasCooldown returns a boolean if a field has been set.
func (o *CooldownResponse) HasCooldown() bool {
	if o != nil && !IsNil(o.Cooldown) {
		return true
	}

	return false
}

// SetCooldown gets a reference to the given int32 and assigns it to the Cooldown field.
func (o *CooldownResponse) SetCooldown(v int32) {
	o.Cooldown = &v
}

func (o CooldownResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CooldownResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cooldown) {
		toSerialize["cooldown"] = o.Cooldown
	}
	return toSerialize, nil
}

type NullableCooldownResponse struct {
	value *CooldownResponse
	isSet bool
}

func (v NullableCooldownResponse) Get() *CooldownResponse {
	return v.value
}

func (v *NullableCooldownResponse) Set(val *CooldownResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCooldownResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCooldownResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCooldownResponse(val *CooldownResponse) *NullableCooldownResponse {
	return &NullableCooldownResponse{value: val, isSet: true}
}

func (v NullableCooldownResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCooldownResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
